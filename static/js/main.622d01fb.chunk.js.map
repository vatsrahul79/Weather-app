{"version":3,"sources":["components/UserLocation/UserLocation.js","components/Chart.jsx","components/DisplayData/DisplayData.jsx","components/Searchbar/Searchbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["UserLocation","useState","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","useEffect","navigator","code","message","geolocation","getCurrentPosition","Root","withStyles","root","display","margin","flexDirection","name","classes","restProps","className","Label","label","whiteSpace","Area","props","Path","path","area","x","arg","y1","val","y0","startVal","curve","curveCatmullRom","WeatherChart","this","Paper","data","hourly","chart","factory","scalePoint","valueField","argumentField","seriesComponent","position","rootComponent","labelComponent","React","paddingRight","dayjs","extend","advancedFormat","useStyles","makeStyles","bullet","transform","title","fontSize","pos","marginBottom","DisplayData","loading","changeFormat","dates","date","dated","format","daily","map","all","i","Card","item","xs","CardContent","Typography","variant","component","dt","color","Math","floor","temp","day","weather","main","src","icon","alt","description","current","pressure","humidity","Searchbar","cityData","setCityData","city","setCity","setLoading","lon","searchLocation","setSearchLocation","Api_key","fetch","then","res","json","catch","err","console","log","Container","fixed","placeholder","onChange","e","value","target","handleChange","type","onClick","coord","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.622d01fb.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst UserLocation = () => {\n    const [location, setLocation ] = useState({\n        loaded:false,\n        coordinates:{ lat:\"\",lng:\"\" } \n    })\n\n    const onSuccess = (location) =>{\n        setLocation({\n            loaded:true,\n            coordinates:{\n                lat:location.coords.latitude,\n                lng:location.coords.longitude,\n            },\n        })\n    }\n\n    const onError = error =>{\n        setLocation({\n            loaded:true,\n          error,\n        })\n    }\n\n    useEffect(()=>{\n        if(!(\"geolocation\" in navigator)){\n            onError({\n                code:0,\n                message:\"Geolocation not supported\"\n            })\n        }\n        navigator.geolocation.getCurrentPosition(onSuccess,onError)\n    },[])\n    return location;\n};\n\nexport default UserLocation;","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  AreaSeries,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ArgumentScale, Animation } from '@devexpress/dx-react-chart';\nimport {\n  curveCatmullRom,\n  area,\n} from 'd3-shape';\nimport { scalePoint } from 'd3-scale';\n\nconst legendStyles = () => ({\n  root: {\n    display: 'flex',\n    margin: 'auto',\n    flexDirection: 'row',\n  },\n});\nconst legendRootBase = ({ classes, ...restProps }) => (\n  <Legend.Root {...restProps} className={classes.root} />\n);\nconst Root = withStyles(legendStyles, { name: 'LegendRoot' })(legendRootBase);\nconst legendLabelStyles = () => ({\n  label: {\n    whiteSpace: 'nowrap',\n  },\n});\nconst legendLabelBase = ({ classes, ...restProps }) => (\n  <Legend.Label className={classes.label} {...restProps} />\n);\nconst Label = withStyles(legendLabelStyles, { name: 'LegendLabel' })(legendLabelBase);\nconst demoStyles = () => ({\n  chart: {\n    paddingRight: '20px',\n  },\n});\n\nconst Area = props => (\n  <AreaSeries.Path\n    {...props}\n    path={area()\n      .x(({ arg }) => arg)\n      .y1(({ val }) => val)\n      .y0(({ startVal }) => startVal)\n      .curve(curveCatmullRom)}\n  />\n);\n\n\nclass WeatherChart extends React.PureComponent {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Paper>\n        <Chart\n          data={this.props.data.hourly}\n          className={classes.chart}\n        >\n          <ArgumentScale factory={scalePoint} />\n          <ArgumentAxis />\n          <ValueAxis />\n\n          <AreaSeries\n            name=\"Weather Report\"\n            valueField=\"temp\"\n            argumentField=\"dt\"\n            seriesComponent={Area}\n          />\n\n          <Animation />\n          <Legend position=\"bottom\" rootComponent={Root} labelComponent={Label} />\n        </Chart>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(demoStyles, { name: 'Demo' })(WeatherChart);\n","import React from 'react';\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport dayjs from \"dayjs\";\nimport WeatherChart from '../Chart'\n\ndayjs.extend(advancedFormat)\n\nconst useStyles = makeStyles({\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nconst DisplayData = (props) => {\n    const classes = useStyles();\n    const { data, loading } = props\n\n    const changeFormat = (dates) => {\n        const date = dayjs(dates);\n        const dated = dayjs(date).format(\"ddd\");\n        return `${dated}`;\n    };\n\n    if(loading){\n        return <div className=\"loader\"></div>;\n    }\n\n    const iconUrl = (icon) => `http://openweathermap.org/img/wn/${icon}.png`\n    return (\n        <div>\n            <div className=\"row\">\n                {data ? data.daily.map((all, i) => {\n                    return (\n                        <div key={i} className=\"col d-flex\" >\n                            <Card item xs={2} className={classes.root}>\n                                <CardContent>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        {changeFormat(all.dt)}\n                                    </Typography>\n                                    <Typography className={classes.pos} variant=\"h5\" color=\"textSecondary\">\n                                        {Math.floor(all.temp.day - 273.15)}\n                                        <sup>o</sup>C\n                                    </Typography>\n                                    <Typography variant=\"body2\" component=\"p\">\n                                        {all.weather[0].main}\n                                    </Typography>\n                                    <img src={iconUrl(all.weather[0].icon)} alt=\"weather\" />\n                                    <Typography variant=\"body2\" component=\"p\">\n                                        {all.weather[0].description}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n\n                        </div>\n                    )\n                }) : null}\n            </div>\n            <div className=\"mt-4\">\n                <WeatherChart data={data} />\n                <div className=\"row mr-5\">\n                    <div>\n                    <h4 className=\"col-4\">Pressure</h4>\n                <p>{Math.floor(data.current.pressure)}</p>\n                    </div>\n                <div className=\"ml-5\">\n                <h4 className=\"col-4\">Humidity</h4>\n                <p>{Math.floor(data.current.humidity)}%</p>\n                </div>\n                </div>\n                \n            </div>\n        </div>\n    )\n};\n\nexport default DisplayData;","import React, { useState, useEffect } from 'react';\nimport './Searchbar.css';\nimport { Container } from \"@material-ui/core\";\nimport UserLocation from '../UserLocation/UserLocation'\nimport DisplayData from '../DisplayData/DisplayData'\n\nconst Searchbar = () => {\n  const [cityData, setCityData] = useState([])\n  const [city, setCity] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const location = UserLocation()\n  const [searchLocation, setSearchLocation] = useState({\n    loading: false,\n    coordinates: {\n      lat: \"\",\n      lon: \"\"\n    }\n  })\n\n  const Api_key = 'c609afff11a2dedc1d4d3770928b8fe0'\n  useEffect(() => {\n    setLoading(true)\n    if (location.coordinates.lng && location.coordinates.lat) {\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${location.coordinates.lat}&lon=${location.coordinates.lng}&appid=${Api_key}`)\n        .then(res => res.json())\n        .then((data) => {\n          setCityData(data)\n          setLoading(false)\n        })\n        .catch((err) => console.log(err));\n    }\n  }, [location])\n\n  useEffect(() => {\n    setLoading(true)\n    if (searchLocation.coordinates.lng && searchLocation.coordinates.lat) {\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${searchLocation.coordinates.lat}&lon=${searchLocation.coordinates.lng}&appid=${Api_key}`)\n        .then(res => res.json())\n        .then((data) =>{ \n          setCityData(data)\n          setLoading(false)\n        })\n        .catch((err) => console.log(err));\n    }\n  }, [searchLocation, city])\n\n  const handleChange = (e) => {\n    const { value } = e.target\n    setCity(value)\n  }\n\n  function handleClick() {\n    setLoading(false)\n    fetch(`https://api.openweathermap.org/data/2.5/weather?appid=${Api_key}&q=${city}`)\n      .then(res => res.json())\n      .then((data) => data)\n      .then(data=>{\n        setSearchLocation({\n          loaded: true,\n          coordinates: {\n            lat: data.coord.lat,\n            lng: data.coord.lon,\n          },\n        })\n      })\n      .catch((err) => console.log(err));\n\n  }\n\n  if (!location.loaded) {\n    return <div className=\"loader\"></div>;\n  }\n\n  return (\n    <Container fixed>\n      <div className=\"searchbar\">\n        <div className=\"searchbar-header\">\n        </div>\n        <div className=\"searchbar-search\">\n          <div className=\"searchbar-searchContainer\">\n          <i className=\"material-icons\">location_on</i>\n            <input placeholder=\"Search by location\" onChange={(e) => handleChange(e)} value={city} type=\"text\" />\n            <div><i className=\"fa fa-search\"  onClick={handleClick}></i></div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          {cityData.length !== 0 ? cityData && <DisplayData data={cityData} loading={loading} /> : null}\n        </div>\n      </div>\n    </Container>\n  )\n};\n\nexport default Searchbar;","import React from 'react';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Searchbar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}